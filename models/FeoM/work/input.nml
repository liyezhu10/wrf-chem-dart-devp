&perfect_model_obs_nml
   async                    = 0
   start_from_restart       = .true.
   output_restart           = .true.
   init_time_days           = -1
   init_time_seconds        = -1
   first_obs_days           = -1
   first_obs_seconds        = -1
   last_obs_days            = -1
   last_obs_seconds         = -1
   output_interval          = 1
   restart_in_file_name     = "perfect_ics"
   restart_out_file_name    = "perfect_restart"
   obs_seq_in_file_name     = "obs_seq.in"
   obs_seq_out_file_name    = "obs_seq.out"
   adv_ens_command          = "advance_model_script.die"
   output_timestamps        = .true.
   trace_execution          = .false.
   output_forward_op_errors = .false.
   print_every_nth_obs      = 100
   silence                  = .true.
   /

&filter_nml
   async                    = 5
   adv_ens_command          = "advance_model_script.die"
   ens_size                 = 3
   start_from_restart       = .true.
   output_restart           = .true.
   obs_sequence_in_name     = "obs_seq.out"
   obs_sequence_out_name    = "obs_seq.final"
   restart_in_file_name     = "filter_ics"
   restart_out_file_name    = "filter_restart"
   init_time_days           = -1
   init_time_seconds        = -1
   first_obs_days           = -1
   first_obs_seconds        = -1
   last_obs_days            = -1
   last_obs_seconds         = -1
   num_output_state_members = 30
   num_output_obs_members   = 30
   output_interval          = 1
   num_groups               = 1
   input_qc_threshold       = 3.0
   outlier_threshold        = 3.0
   output_forward_op_errors = .false.
   output_timestamps        = .true.
   output_inflation         = .true.
   trace_execution          = .true.
   silence                  = .true.

   inf_flavor                  = 0,                       0
   inf_initial_from_restart    = .false.,                  .false.
   inf_sd_initial_from_restart = .true.,                  .false.
   inf_output_restart          = .true.,                  .true.
   inf_deterministic           = .true.,                  .true.
   inf_in_file_name            = 'prior_inflate_ics',     'post_inflate_ics'
   inf_out_file_name           = 'prior_inflate_restart', 'post_inflate_restart'
   inf_diag_file_name          = 'prior_inflate_diag',    'post_inflate_diag'
   inf_initial                 = 1.02,                    1.02
   inf_sd_initial              = 0.6,                     0.0
   inf_damping                 = 0.9,                     1.0
   inf_lower_bound             = 1.0,                     1.0
   inf_upper_bound             = 100.0,                   100.0
   inf_sd_lower_bound          = 0.6,                     0.0
   /

&mpi_utilities_nml
   /

&smoother_nml
   num_lags              = 0
   start_from_restart    = .false.
   output_restart        = .false.
   restart_in_file_name  = 'smoother_ics'
   restart_out_file_name = 'smoother_restart'
   /

&ensemble_manager_nml
   single_restart_file_in  = .false.
   single_restart_file_out = .false.
   perturbation_amplitude  = 0.2
   /

&assim_tools_nml
   filter_kind                     = 1
   cutoff                          = 0.005 
   sort_obs_inc                    = .false.
   spread_restoration              = .false.
   sampling_error_correction       = .false.
   adaptive_localization_threshold = -1  
   output_localization_diagnostics = .true.
   localization_diagnostics_file   = 'localization_diagnostics'
   print_every_nth_obs             = 100
   /

&location_nml
   nlon                        = 71, 
   nlat                        = 36
   horiz_dist_only             = .false.
   vert_normalization_pressure = 100000.0
   vert_normalization_height   = 200.0
   vert_normalization_level    = 10.0
   approximate_distance        = .false.
   output_box_info             = .false.
   print_box_level             = 0
   /

&xyz_location_nml
   /

&cov_cutoff_nml
   select_localization = 1
   /

&reg_factor_nml
   select_regression    = 1
   input_reg_file       = "time_mean_reg"
   save_reg_diagnostics = .false.
   reg_diagnostics_file = "reg_diagnostics"
   /

&obs_sequence_nml
   write_binary_obs_sequence = .false.
   /

# options for assimilate and evaluate include:
# (first column is the obs, second is what needs to be in the state vector
# to compute it.)
# ARGO_U_CURRENT_COMPONENT,      KIND_U_CURRENT_COMPONENT
# ARGO_V_CURRENT_COMPONENT,      KIND_V_CURRENT_COMPONENT
# ADCP_U_CURRENT_COMPONENT,      KIND_U_CURRENT_COMPONENT
# ADCP_V_CURRENT_COMPONENT,      KIND_V_CURRENT_COMPONENT
# ADCP_SALINITY,                 KIND_SALINITY
# ADCP_TEMPERATURE,              KIND_TEMPERATURE
# FLOAT_SALINITY,                KIND_SALINITY
# FLOAT_TEMPERATURE,             KIND_TEMPERATURE
# DRIFTER_U_CURRENT_COMPONENT,   KIND_U_CURRENT_COMPONENT
# DRIFTER_V_CURRENT_COMPONENT,   KIND_V_CURRENT_COMPONENT
# DRIFTER_SALINITY,              KIND_SALINITY
# DRIFTER_TEMPERATURE,           KIND_TEMPERATURE
# GLIDER_U_CURRENT_COMPONENT,    KIND_U_CURRENT_COMPONENT
# GLIDER_V_CURRENT_COMPONENT,    KIND_V_CURRENT_COMPONENT
# GLIDER_SALINITY,               KIND_SALINITY
# GLIDER_TEMPERATURE,            KIND_TEMPERATURE
# MOORING_U_CURRENT_COMPONENT,   KIND_U_CURRENT_COMPONENT
# MOORING_V_CURRENT_COMPONENT,   KIND_V_CURRENT_COMPONENT
# MOORING_SALINITY,              KIND_SALINITY
# MOORING_TEMPERATURE,           KIND_TEMPERATURE
# MOORING_PRESSURE,              KIND_PRESSURE
# BOTTLE_SALINITY,               KIND_SALINITY
# BOTTLE_TEMPERATURE,            KIND_TEMPERATURE
# CTD_SALINITY,                  KIND_SALINITY
# CTD_TEMPERATURE,               KIND_TEMPERATURE
# TCTD_SALINITY,                 KIND_SALINITY
# TCTD_TEMPERATURE,              KIND_TEMPERATURE
# STD_SALINITY,                  KIND_SALINITY
# STD_TEMPERATURE,               KIND_TEMPERATURE
# XCTD_SALINITY,                 KIND_SALINITY
# XCTD_TEMPERATURE,              KIND_TEMPERATURE
# MBT_SALINITY,                  KIND_SALINITY
# MBT_TEMPERATURE,               KIND_TEMPERATURE
# XBT_SALINITY,                  KIND_SALINITY
# XBT_TEMPERATURE,               KIND_TEMPERATURE
# DBT_SALINITY,                  KIND_SALINITY
# DBT_TEMPERATURE,               KIND_TEMPERATURE
# APB_SALINITY,                  KIND_SALINITY
# APB_TEMPERATURE,               KIND_TEMPERATURE
# DOPPLER_U_CURRENT_COMPONENT,   KIND_U_CURRENT_COMPONENT
# DOPPLER_V_CURRENT_COMPONENT,   KIND_V_CURRENT_COMPONENT
# DOPPLER_W_CURRENT_COMPONENT,   KIND_W_CURRENT_COMPONENT
# SATELLITE_MICROWAVE_SST,       KIND_TEMPERATURE
# SATELLITE_INFRARED_SST,        KIND_TEMPERATURE

&obs_kind_nml
   assimilate_these_obs_types = 'SALINITY', 'TEMPERATURE'
   evaluate_these_obs_types = '', ''
   /

&assim_model_nml
   write_binary_restart_files = .true.
   netCDF_large_file_support  = .true.
   /

&model_nml
   model_analysis_filename = '/glade/p/work/thoar/DART/feom/models/FeoM/FEOMMESH/ENS01.2009.oce.nc'
   output_state_vector          = .true., 
   assimilation_period_days     = 0
   assimilation_period_seconds  = 86400
   model_perturbation_amplitude = 0.0001
   calendar                     = 'Gregorian'
   debug                        = 2 
   feom_state_variables = 'salt', 'KIND_SALINITY'
                          'temp', 'KIND_TEMPERATURE'
   /

# NOTE: h(nVertLevels,nCells,Time) is layer thickness, not SSH
#  we don't have a kind defined for thickness yet.
#  examples of other kinds which could be in state vector.
#  the temperature should really be potential temp, but the
#  conversion routines (at the end of the model_mod.f90 file)
#  are commented out here because they're for the atmosphere not ocean.
#  we need to add a case for temp vs potential temp, and conversion code.
#                    'tracer1',      'KIND_TRACER_CONCENTRATION' 
#                          'u',      'KIND_EDGE_NORMAL_SPEED'
#                'temperature',      'KIND_POTENTIAL_TEMPERATURE'

&model_to_dart_nml
   model_to_dart_output_file = filter_ics.0001
   print_data_ranges=.false.
  /

&dart_to_model_nml
   dart_to_model_input_file = filter_restart.0001
   advance_time_present     = .false.
  / 

&utilities_nml
   TERMLEVEL = 1
   module_details = .false.
   logfilename = 'dart_log.out'
   nmlfilename = 'dart_log.nml'
   write_nml   = 'file'
   /

&preprocess_nml
    input_obs_def_mod_file = '../../../obs_def/DEFAULT_obs_def_mod.F90', 
   output_obs_def_mod_file = '../../../obs_def/obs_def_mod.f90', 
   input_obs_kind_mod_file = '../../../obs_kind/DEFAULT_obs_kind_mod.F90', 
  output_obs_kind_mod_file = '../../../obs_kind/obs_kind_mod.f90', 
               input_files = '../../../obs_def/obs_def_ocean_mod.f90'
   /

&obs_sequence_tool_nml
   num_input_files   = 2
   filename_seq      = 'obs_seq.one', 'obs_seq.two'
   filename_out      = 'obs_seq.processed'
   first_obs_days = 149019
   first_obs_seconds = -1
   last_obs_days = 149020
   last_obs_seconds  = -1
   print_only        = .false.
   min_lat           = -90.0
   max_lat           =  90.0
   min_lon           =   0.0
   max_lon           = 360.0
   gregorian_cal     = .true.
   /

&restart_file_tool_nml
   input_file_name              = "filter_restart"
   output_file_name             = "filter_updated_restart"
   ens_size      = 30
   single_restart_file_in       = .true.
   single_restart_file_out      = .true.
   write_binary_restart_files   = .true.
   overwrite_data_time          = .false.
   new_data_days                = -1
   new_data_secs                = -1
   input_is_model_advance_file  = .false.
   output_is_model_advance_file = .false.
   overwrite_advance_time       = .false.
   new_advance_days             = -1
   new_advance_secs             = -1
   gregorian_cal                = .true.
   /

&obs_diag_nml
   obs_sequence_name      = ''
   obs_sequence_list      = 'file_list.txt'
   first_bin_center      =  2009,  1,  1, 0, 0, 0 
   last_bin_center       =  2009,  2,  1, 0, 0, 0 
   bin_separation        =     0,  0,  1, 0, 0, 0 
   bin_width             =     0,  0,  1, 0, 0, 0 
   time_to_skip          =     0,  0,  0, 0, 0, 0 
   max_num_bins          = 1000
   trusted_obs           = 'null'
   Nregions              = 1
   lonlim1               = 27.000,  20.0, 120.0
   lonlim2               = 30.000, 120.0, 270.0
   latlim1               = 40.250, -90.0, -90.0
   latlim2               = 41.125,  25.0,  90.0
   reg_names             = 'Marmara',
   create_rank_histogram = .true.
   outliers_in_histogram = .true.
   use_zero_error_obs    = .false.
   verbose               = .true.
   /

# obs_seq_to_netcdf also requires the schedule_nml.
# In this context, schedule_nml defines how many netcdf files get created.
# Each 'bin' results in an obs_epoch_xxxx.nc file.
# default is to put everything into one 'bin'.

&obs_seq_to_netcdf_nml
   obs_sequence_name = '/glade/scratch/thoar/FILTER/obs_seq.final'
   obs_sequence_list = ''
   append_to_netcdf  = .false.
   lonlim1           = 22.50
   lonlim2           = 33.10
   latlim1           = 38.60
   latlim2           = 43.00
   verbose           = .true.
   /

# This is wide open ... all times get put in the netCDF file
#  first_bin_start =  1601,  1,  1,  0,  0,  0
#  first_bin_end   =  2999,  1,  1,  0,  0,  0
#  last_bin_end    =  2999,  1,  1,  0,  0,  0

&schedule_nml
   calendar        = 'Gregorian'
   first_bin_start =  2009,  1,  1, 12,  0,  0
   first_bin_end   =  2009,  1,  2, 12,  0,  0
   last_bin_end    =  2009,  1,  2, 12,  0,  0
   bin_interval_days    = 1000000
   bin_interval_seconds = 0
   max_num_bins         = 1000
   print_table          = .true.
   /


# possible vertical coordinate systems are:
# VERTISUNDEF VERTISSURFACE VERTISLEVEL VERTISPRESSURE VERTISHEIGHT VERTISSCALEHEIGHT
   kind_of_interest = 'KIND_TEMPERATURE'
   kind_of_interest = 'KIND_SALINITY'
   kind_of_interest = 'KIND_U_CURRENT'
   kind_of_interest = 'KIND_V_CURRENT'
   kind_of_interest = 'KIND_DENSITY'

&model_mod_check_nml
   dart_input_file      = 'filter_ics.0001'
   output_file           = 'check_me'
   advance_time_present  = .FALSE.
   verbose               = .FALSE.
   test1thru             = 3
   x_ind                = 1 
   loc_of_interest       = 26.0922, 40.1513, 12.0
   kind_of_interest       = 'KIND_SALINITY'
   interp_test_lonrange  = 0.0, 359.0
   interp_test_dlon      = 1.0
   interp_test_latrange  = -89.0, 89.0
   interp_test_dlat      = 1.0
   interp_test_vertrange = 100.0,  300.0
   interp_test_dvert     = 200.0
   /
