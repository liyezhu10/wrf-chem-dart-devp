#!/bin/csh
#
# DART software - Copyright UCAR. This open source software is provided
# provided by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# DART $Id$

#-----------------------------------------------------------------------
# Purpose, describe things here, etc.
#-----------------------------------------------------------------------

# ==============================================================================
# Options defining the experiment:
#
# CASE          The value of "CASE" will be used many ways; directory and file
#               names both locally and (possibly) on the HPSS, and script names;
#               so consider its length and information content.
# compset       Defines the vertical resolution and physics packages to be used.
#               Must be a standard CESM compset; see the CESM documentation.
# resolution    Defines the horizontal resolution and dynamics; see CESM docs.
# cesmtag       The version of the CESM source code to use when building the code.
# num_instances The number of ensemble members.
#
# For list of the pre-defined component sets: ./query_config --compsets
# To create a variant compset, see the CESM documentation and carefully
# incorporate any needed changes into this script.
# ==============================================================================
# the supported compset does not work because CISM only uses a no_leap calendar
# 2000_DATM%GSWP3v1_CLM45%BGC-CROP_SICE_SOCN_RTM_CISM2%NOEVOLVE_SWAV (I2000Clm45BgcCrop)

setenv CASE           clm5_pmo
setenv resolution     f09_f09
setenv compset        2000_DATM%GSWP3v1_CLM50%BGC-CROP_SICE_SOCN_MOSART_SGLC_SWAV
setenv cesmtag        clm_dev
setenv num_instances  1

# ==============================================================================
# Directories:
# cesmdata     Location of some supporting CESM data files.
# cesmroot     Location of the CESM code base.  This version of the script
#              only supports version cesm1_5_beta06c.
# caseroot     Defines the CESM case directory - where the CESM+DART
#              configuration files will be stored.  This should probably not
#              be in scratch (on yellowstone, your 'work' partition is suggested).
#              This script will delete any existing caseroot, so this script,
#              and other useful things should be kept elsewhere.
# rundir       Defines the location of the CESM run directory.  Will need large
#              amounts of disk space, generally on a scratch partition.
# exeroot      Defines the location of the CESM executable directory , where the
#              CESM executables will be built.  Medium amount of space
#              needed, generally on a scratch partition.
# archdir      Defines the location of the CESM short-term archive directories.
#              Requires large amounts of disk space, may be on a scratch partition if
#              the long-term archiver is invoked to move these files to permanent storage.
#              Files will remain here until the long-term archiver moves it to permanent storage.
# dartroot     Location of the root of _your_ DART installation
# baseobsdir   Part of the directory name containing the obs_seq.out files to be used in the
#              assimilation. The year, month, and filename will be provided in assimilate.csh.
#              Will be inherited by CESM#_#_DART_config and inserted into assimilate.csh
# ==============================================================================

setenv project      P86850054
setenv machine      cheyenne
setenv cesmdata     /glade/p/cesm/cseg/inputdata
setenv cesmroot     /glade/p/work/${USER}/CESM/$cesmtag
setenv caseroot     /glade/p/work/${USER}/cases/$cesmtag/${CASE}
setenv rundir       /glade/scratch/${USER}/$cesmtag/${CASE}/run
setenv exeroot      /glade/scratch/${USER}/$cesmtag/${CASE}/bld
setenv archdir      /glade/scratch/${USER}/$cesmtag/${CASE}/archive

setenv dartroot     /glade/p/work/thoar/DART/cesm_clm
setenv baseobsdir   /glade/p/image/Observations/land

# ==============================================================================
# configure settings:
#
# refcase    Name of the existing reference case that this run will start from.
# refyear    The specific date/time-of-day in the reference case that this
# refmon     run will start from.  (Also see 'runtime settings' below for
# refday     start_year, start_mon, start_day and start_tod.)
# reftod
#
# SingleInstanceRefcase
#            Filenames from a multi-instance CESM run have an instance number
#            in them.  Filenames from a single instance CESM run do not.
#            Setting this helps the script figure out the right filenames to
#            generate when copying files from the refernenc case:
#               1 means the restart files have no instance numbers.
#               0 means the restart files have strings like .0001. in their names.
#
# TRUTHinstance
#            If SingleInstanceRefcase is 0, this must be set to select the
#            specific instance you want to use when selecting one instance from
#            a multi-instance run.  e.g. If you have a reference case run
#            with 80 instances, 1<= TRUTHinstance <= 80. NO LEADING ZEROS.
#
# stagedir   The directory location of the reference case files.
#            This will surely change based on the compset and machine.

setenv refcase     clm5_f09_spinup80
setenv refyear     1999
setenv refmon      01
setenv refday      01
setenv reftod      00000

setenv refdate      $refyear-$refmon-$refday
setenv reftimestamp $refyear-$refmon-$refday-$reftod

setenv stagedir /glade/p/image/RDA_strawman/CESM_ensembles/CLM/CLM5BGC-Crop/${reftimestamp}

setenv SingleInstanceRefcase 0
setenv TRUTHinstance 23

# start_year     generally this is the same as the reference case date, but it can
# start_month    be different if you want to start this run as if it was a different time.
# start_day
# start_tod
#
# short_term_archiver  Copies the files from each job step to a 'rest' directory.
#
# resubmit      How many job steps to run on continue runs (should be 0 initially)
# stop_option   Units for determining the forecast length between assimilations
# stop_n        Number of time units in each forecast
#
# clm_dtime     CLM dynamical timestep (in seconds) ... 1800 is the default
# h1nsteps      is the number of time steps to put in a single CLM .h1. file
#               DART needs to know this and the only time it is known is during
#               this configuration step. Changing the value later has no effect.
#
# If the long-term archiver is off, you get a chance to examine the files before
# they get moved to long-term storage. You can always submit $CASE.l_archive
# whenever you want to free up space in the short-term archive directory.

setenv start_year    2000
setenv start_month   01
setenv start_day     01
setenv start_tod     00000

# ==============================================================================
# job settings:
#
# queue      can be changed during a series by changing the case.run
# timewall   can be changed during a series by changing the case.run HH:MM:SS
#
# ==============================================================================

setenv queue               regular
setenv timewall            00:20:00
setenv short_term_archiver off

# ==============================================================================
# standard commands:
#
# If you are running on a machine where the standard commands are not in the
# expected location, add a case for them below.
# ==============================================================================

set nonomatch       # suppress "rm" warnings if wildcard does not match anything

# The FORCE options are not optional.
# The VERBOSE options are useful for debugging though
# some systems don't like the -v option to any of the following
switch ("`hostname`")
   case ys*:
         # NCAR "yellowstone"
         set   MOVE = '/bin/mv -v'
         set   COPY = '/bin/cp -v --preserve=timestamps'
         set   LINK = '/bin/ln -vsf'
         set REMOVE = '/bin/rm -rf'
      breaksw
   default:
         # NERSC "hopper", TACC "stampede" ... many more
         set   MOVE = 'mv -v'
         set   COPY = 'cp -v --preserve=timestamps'
         set   LINK = 'ln -vsf'
         set REMOVE = 'rm -rf'
      breaksw
endsw

# ==============================================================================
# Create the case - this creates the CASEROOT directory.
# ==============================================================================

# FATAL idea to make caseroot the same dir as where this setup script is
# since the build process removes all files in the caseroot dir before
# populating it.  try to prevent shooting yourself in the foot.

if ( ${caseroot} == `pwd` ) then
   echo "ERROR: the setup script should not be located in the caseroot"
   echo "directory, because all files in the caseroot dir will be removed"
   echo "before creating the new case.  move the script to a safer place."
   exit 1
endif

echo "removing old files from ${caseroot}"
echo "removing old files from ${exeroot}"
echo "removing old files from ${rundir}"

${REMOVE} ${caseroot}
${REMOVE} ${exeroot}
${REMOVE} ${rundir}
${cesmroot}/cime/scripts/create_newcase  --res  ${resolution} \
                                         --mach ${machine} \
                                         --compset ${compset} \
                                         --case ${caseroot} \
                                         --project ${project} \
                                         --run-unsupported || exit 2

# ==============================================================================
# Preserve a copy of this script as it was run.
# Copy the DART setup script (CESM_DART_config) to CASEROOT.
# Since we know the DARTROOT and BASEOBSDIR now, record them into
# CASEROOT/CESM_DART_config now.
# ==============================================================================

set ThisFileName = $0:t
${COPY} $ThisFileName ${caseroot}/${ThisFileName}.original

if (   -e ${dartroot}/models/clm/shell_scripts/cesm2_0/CESM2_0_DART_config.template) then
   sed -e "s#BOGUS_DART_ROOT_STRING#${dartroot}#" \
       -e "s#BOGUS_DART_OBS_STRING#${baseobsdir}#" \
       -e "s#BOGUS_CASEROOT_STRING#${caseroot}#" \
          ${dartroot}/models/clm/shell_scripts/cesm2_0/CESM2_0_DART_config.template \
           >! ${caseroot}/CESM_DART_config  || exit 3
   chmod 755  ${caseroot}/CESM_DART_config
else
   echo "ERROR: the script to configure for data assimilation is not available."
   echo "       ${dartroot}/models/clm/shell_scripts/cesm2_0/CESM2_0_DART_config.template MUST exist."
   exit 4
endif

# ==============================================================================
cd ${caseroot}
# ==============================================================================

# Save a copy for debug purposes
foreach FILE ( *xml )
   if ( ! -e        ${FILE}.original ) then
      ${COPY} $FILE ${FILE}.original
   endif
end

# Get a bunch of environment variables.
# If any of these are changed by xmlchange calls in this program,
# then they must be explicty changed with setenv calls too.

setenv TEST_MPI              `./xmlquery MPI_RUN_COMMAND       --value`
setenv CLM_CONFIG_OPTS       `./xmlquery CLM_CONFIG_OPTS       --value`
setenv COMPSET               `./xmlquery COMPSET               --value`
setenv COMP_ATM              `./xmlquery COMP_ATM              --value`
setenv COMP_OCN              `./xmlquery COMP_OCN              --value`
setenv CIMEROOT              `./xmlquery CIMEROOT              --value`
setenv CASEROOT              `./xmlquery CASEROOT              --value`

# Make sure the case is configured with a stub ocean and a data atmosphere.

if ( (${COMP_OCN} != socn) || (${COMP_ATM} != datm) ) then
   echo " "
   echo "ERROR: This setup script is not appropriate for active ocean or atmospheric compsets."
   echo " "
   exit 5
endif

# The forward operators for the flux tower obs _require_ that we predict the name of
# of the history file. The history file names of interest are time-tagged with the
# _start_ of the forecast - not the restart time. The obs_def_tower_mod.f90 requires
# the stop_option to be 'nhours', and the stop_n to be accurate.

setenv resubmit            0
setenv stop_option         nhours
setenv stop_n              24

# stream_year_first  settings for the stream files for the Data Atmosphere (DATM).
# stream_year_last
# stream_year_align

set stream_year_align = 1998
set stream_year_first = 1998
set stream_year_last  = 2010

./xmlchange CALENDAR=GREGORIAN
./xmlchange EXEROOT=${exeroot}
./xmlchange RUNDIR=${rundir}

./xmlchange STOP_OPTION=$stop_option
./xmlchange STOP_N=$stop_n
./xmlchange RESUBMIT=$resubmit

./xmlchange REST_OPTION=nhours
./xmlchange REST_N=24

./xmlchange DATM_MODE=CPLHISTForcing
./xmlchange DATM_CPLHIST_YR_ALIGN=$stream_year_align
./xmlchange DATM_CPLHIST_YR_START=$stream_year_first
./xmlchange DATM_CPLHIST_YR_END=$stream_year_last

#      --- In a hybrid run the model is initialized as a startup, BUT uses
#      initialization datasets FROM A PREVIOUS case.  This
#      is somewhat analogous to a branch run with relaxed restart
#      constraints.  A hybrid run allows users to bring together combinations
#      of initial/restart files from a previous case (specified by
#      RUN_REFCASE) at a given model output date (specified by
#      RUN_REFDATE). Unlike a branch run, the starting date of a hybrid run
#      (specified by RUN_STARTDATE) can be modified relative to the reference
#      case. In a hybrid run, the model does not continue in a bit-for-bit
#      fashion with respect to the reference case. The resulting climate,
#      however, should be continuous provided that no model source code or
#      namelists are changed in the hybrid run.  In a hybrid initialization,
#      the ocean model does not start until the second ocean coupling
#      (normally the second day), and the coupler does a cold start without
#      a restart file.</desc>

./xmlchange RUN_TYPE=hybrid
./xmlchange RUN_REFCASE=${refcase}
./xmlchange RUN_REFDATE=${refdate}
./xmlchange RUN_STARTDATE=${start_year}-${start_month}-${start_day}

./xmlchange START_TOD=$start_tod
./xmlchange RUN_REFTOD=$reftod
./xmlchange GET_REFCASE=TRUE

# pnetcdf is default
./xmlchange PIO_TYPENAME=netcdf

set TEST_MPI = `./xmlquery --value MPI_RUN_COMMAND'`
if (${TEST_MPI} == 'UNSET') then
   ./xmlchange MPI_RUN_COMMAND=mpiexec.mpt
endif

# Task layout:
# Set the nodes_per_instance below to match your case.
# By computing task counts like we do below, we guarantee each instance uses
# a whole number of nodes which is the recommended configuration.
# This is a decent layout for a single instance, but should be explored.
# Presently, all components run 'serially' - one after another.

@ nthreads = 1
@ nodes_per_instance = 4
@ ptile = -1

@ atm_tasks = $ptile * $nodes_per_instance
@ cpl_tasks = $ptile * $nodes_per_instance
@ ocn_tasks = $ptile * $nodes_per_instance
@ wav_tasks = $ptile * $nodes_per_instance
@ glc_tasks = $ptile * $nodes_per_instance
@ ice_tasks = $ptile * $nodes_per_instance
@ rof_tasks = $ptile * $nodes_per_instance
@ lnd_tasks = $ptile * $nodes_per_instance
@ esp_tasks = $ptile * $nodes_per_instance

./xmlchange ROOTPE_ATM=0,NTHRDS_ATM=$nthreads,NTASKS_ATM=$atm_tasks
./xmlchange ROOTPE_CPL=0,NTHRDS_CPL=$nthreads,NTASKS_CPL=$cpl_tasks
./xmlchange ROOTPE_OCN=0,NTHRDS_OCN=$nthreads,NTASKS_OCN=$ocn_tasks
./xmlchange ROOTPE_WAV=0,NTHRDS_WAV=$nthreads,NTASKS_WAV=$wav_tasks
./xmlchange ROOTPE_GLC=0,NTHRDS_GLC=$nthreads,NTASKS_GLC=$glc_tasks
./xmlchange ROOTPE_ICE=0,NTHRDS_ICE=$nthreads,NTASKS_ICE=$ice_tasks
./xmlchange ROOTPE_ROF=0,NTHRDS_ROF=$nthreads,NTASKS_ROF=$rof_tasks
./xmlchange ROOTPE_LND=0,NTHRDS_LND=$nthreads,NTASKS_LND=$lnd_tasks
./xmlchange ROOTPE_ESP=0,NTHRDS_ESP=$nthreads,NTASKS_ESP=$esp_tasks

./case.setup || exit 6

echo "case setup finished"

# ====================================

./xmlchange --subgroup case.run        --id JOB_QUEUE          --val ${queue}
./xmlchange --subgroup case.run        --id JOB_WALLCLOCK_TIME --val ${timewall}
./xmlchange --subgroup case.st_archive --id JOB_WALLCLOCK_TIME --val 4:00

if ($short_term_archiver == 'off') then
   ./xmlchange DOUT_S=FALSE
else
   ./xmlchange DOUT_S=TRUE
endif

# DEBUG = TRUE implies turning on run and compile time debugging.
# INFO_DBUG level of debug output, 0=minimum, 1=normal, 2=more, 3=too much.
./xmlchange DEBUG=FALSE
./xmlchange INFO_DBUG=0

# ==============================================================================
# Modify namelist templates for each instance.
#
# In a hybrid run with CONTINUE_RUN = FALSE (i.e. just starting up):
#
# CLM builds its own 'finidat' value from the REFCASE variables.
#
# All of these must later on be staged with these same filenames.
# OR - all these namelists can be changed to match whatever has been staged.
# MAKE SURE THE STAGING SECTION OF THIS SCRIPT MATCHES THESE VALUES.
# ==============================================================================

@ inst = 1
while ( $inst <= $num_instances )

   # following the CESM strategy for 'inst_string'
   set inst_string = ''
   set true_string = `printf %04d $TRUTHinstance`

   # ===========================================================================
   set fname = "user_nl_datm${inst_string}"
   # ===========================================================================
   # DATM namelist

   set FILE1 = datm.streams.txt.CPLHISTForcing.Solar${inst_string}
   set FILE2 = datm.streams.txt.CPLHISTForcing.nonSolarFlux${inst_string}
   set FILE3 = datm.streams.txt.CPLHISTForcing.State1hr${inst_string}
   set FILE4 = datm.streams.txt.CPLHISTForcing.State3hr${inst_string}

   echo "streams = '$FILE1 $stream_year_align $stream_year_first $stream_year_last'," >> ${fname}
   echo "          '$FILE2 $stream_year_align $stream_year_first $stream_year_last'," >> ${fname}
   echo "          '$FILE3 $stream_year_align $stream_year_first $stream_year_last'," >> ${fname}
   echo "          '$FILE4 $stream_year_align $stream_year_first $stream_year_last'," >> ${fname}
   echo "          'datm.streams.txt.presaero.clim_2000${inst_string} 1 1 1'"         >> ${fname}
   echo "vectors  = 'u:v' "     >> ${fname}
   echo "mapmask  = 'nomask', " >> ${fname}
   echo "           'nomask', " >> ${fname}
   echo "           'nomask', " >> ${fname}
   echo "           'nomask'  " >> ${fname}
   echo "tintalgo = 'coszen', " >> ${fname}
   echo "           'nearest'," >> ${fname}
   echo "           'linear', " >> ${fname}
   echo "           'linear'  " >> ${fname}

   # Create stream files for each ensemble member
   set SOURCEDIR = ${dartroot}/models/clm/shell_scripts/cesm2_0
   ${COPY} ${SOURCEDIR}/datm.streams.txt.CPLHISTForcing.Solar_complete        user_${FILE1}
   ${COPY} ${SOURCEDIR}/datm.streams.txt.CPLHISTForcing.nonSolarFlux_complete user_${FILE2}
   ${COPY} ${SOURCEDIR}/datm.streams.txt.CPLHISTForcing.State1hr_complete     user_${FILE3}
   ${COPY} ${SOURCEDIR}/datm.streams.txt.CPLHISTForcing.State3hr_complete     user_${FILE4}

   foreach FNAME ( user_datm.streams.txt*${inst_string} )
      echo "modifying $FNAME"
      sed s/NINST/${true_string}/g $FNAME >! temp
      sed s/RUNYEAR/${stream_year_first}/g temp >! $FNAME
   end
   ${REMOVE} temp

   # ===========================================================================
   set fname = "user_nl_clm${inst_string}"
   # ===========================================================================

   echo "hist_empty_htapes = .true."                                    >> ${fname}
   echo "hist_fincl1 = 'NEP','TOTECOSYSC','TOTVEGC','TLAI'"             >> ${fname}
   echo "hist_fincl2 = 'NEP','FSH','EFLX_LH_TOT_R'"                     >> ${fname}
   echo "hist_fincl3 = 'TV','TLAI','PBOT','TBOT','TSA','RH2M_R','SNOWDP'" >> ${fname}
   echo "hist_nhtfrq = -$stop_n,1,-$stop_n"     >> ${fname}
   echo "hist_mfilt  = 1,$h1nsteps,1"           >> ${fname}
   echo "hist_avgflag_pertape = 'A','A','I'"    >> ${fname}
   echo "hist_dov2xy = .true.,.true.,.false."   >> ${fname}
   echo "hist_type1d_pertape = ' ',' ',' '"     >> ${fname}
   echo "dtime = $clm_dtime"                    >> ${fname}

   @ inst ++
end

./case.build || exit 7

# ==============================================================================
# What to do next
# ==============================================================================

cat << EndOfText >! CESM_instructions.txt

-------------------------------------------------------------------------
Time to check the case.

1) cd ${rundir}
   and check the compatibility between the namelists/pointer files
   and the files that were staged.

2) cd ${caseroot}

3) check things

4) run a single day, verify that it works without DART
   ./case.submit

5) If that works, start again, this time using DART
   ./xmlchange CONTINUE_RUN=FALSE

6) IF NEEDED, compile all the DART executables by
   cd  ${dartroot}/models/clm/work
   ./quickbuild.csh -mpi

7) Modify the case to enable perfect_model_obs and
   run DART by executing
   cd ${caseroot}
   ./CESM_DART_config
   and follow the directions.

8) If that works, continue the run in $stop_n '"$stop_option"' steps,
   ./xmlchange CONTINUE_RUN=TRUE
   ./xmlchange RESUBMIT=<number_of_cycles_to_run>
   and
   ./case.submit

Check the streams listed in the stream text files.  If more or different
dates need to be added, then do this in the ${CASEROOT}/user_*files*
then invoke 'preview_namelists' so you can check the information in the
CaseDocs or ${rundir} directories.
-------------------------------------------------------------------------

EndOfText

cat CESM_instructions.txt

exit 0

# <next few lines under version control, do not edit>
# $URL$
# $Revision$
# $Date$
