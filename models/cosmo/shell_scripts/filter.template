#!/bin/csh
#
# DART software - Copyright 2004 - 2011 UCAR. This open source software is
# provided by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# $Id$
#
# batch script to put the filter input files in place and start
# an assimilation
#
#==================================================================
#BSUB -J JOB_NAME 
#BSUB -o JOB_NAME.%J.log
#BSUB -P PROJ_NUMBER
#BSUB -W 00:10
#BSUB -q standby
#BSUB -n NPROCS
#BSUB -x
#==================================================================

set myname = $0     # this is the name of this script
set start_time = `date +%s`
echo "host is " `hostname`

# collect various info from the namelist file.  first find the right namelist
# in the file plus the following N lines, then grep those for the particular
# variable you're looking for.  finally, strip off the "name =" part to get the value

# input and output obs sequences
set line       = `fgrep -A 40 \&filter_nml input.nml.template | fgrep obs_sequence_in_name`
set obsseqin   = `echo $line | sed -e 's/^.*obs_sequence_in_name.*=//' -e 's/"//g' -e 's/,//' `

set line       = `fgrep -A 40 \&filter_nml input.nml.template | fgrep obs_sequence_out_name`
set obsseqout  = `echo $line | sed -e 's/^.*obs_sequence_out_name.*=//' -e 's/"//g' -e 's/,//' `

# output state vector files
set line       = `fgrep -A 40 \&filter_nml input.nml.template | fgrep restart_out_file_name`
set outputfile = `echo $line | sed -e 's/^.*restart_out_file_name.*=//' -e 's/"//g' -e 's/,//' `

# number of ensemble members
set line       = `fgrep -A 40 \&filter_nml input.nml.template | fgrep ens_size`
set num_ens    = `echo $line | sed -e 's/^.*ens_size.*=//' -e 's/"//g' -e 's/,//' `


# these are set by the calling script. time is YYYYMMDDhh, base is a dirname
set starttime = STARTTIME
set obsbase   = OBSBASE

set obs_seq_in = $obsbase/obs_seqYYYYMMDDhh

set savelist = "$obsseqout Prior_Diag.nc Posterior_Diag.nc"

# find the inflation files if needed

# run filter
MPIRUN ./filter

# check to see if it created the output file(s).  check for a single file first,
# then base.NNNN for the file-per-member option.
if ( ! -e $outputfile ) then

   set mem = 1
   while ( $mem < $num_ens )
      #  verify ensemble output is here
      set fname = `printf %s.%04d $outputfile $mem`
      if ( ! -e ${fname} ) then
         echo output file $fname not found 
         echo $outputfile not found either
         echo filter failed.  exiting.
         exit -5
      endif
      @ mem ++
   end

endif

# save the basic diagnostic files

foreach i ( $savelist )
 
   # save each of the files in a directory with a name that includes the timestamp
   if ( ! -d YYYYMMDDhh.out ) mkdir YYYYMMDDhh.out

   mv $i YYYYMMDDhh.out/

end


set end_time = `date  +%s`
@ length_time = $end_time - $start_time
echo "duration_sec = $length_time"

exit 0

# <next few lines under version control, do not edit>
# $URL$
# $Revision$
# $Date$


