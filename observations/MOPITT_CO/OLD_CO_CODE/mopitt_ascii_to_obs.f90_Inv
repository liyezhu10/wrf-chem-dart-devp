! Data Assimilation Research Testbed -- DART
! Copyright 2004-2007, Data Assimilation Research Section
! University Corporation for Atmospheric Research
! Licensed under the GPL -- www.gpl.org/licenses/gpl.html

program create_mopitt_obs_sequence

! <next few lines under version control, do not edit>
! $URL: http://subversion.ucar.edu/DAReS/DART/trunk/obs_sequence/create_obs_sequence.f90 $
! $Id: create_obs_sequence.f90 2713 2007-03-26 04:09:04Z thoar $
! $Revision: 2713 $
! $Date: 2007-03-25 22:09:04 -0600 (Sun, 25 Mar 2007) $

!=============================================
! Created by AFA for MOPITT CO retrieval obs
! Based from create_obs_sequence.f90
!=============================================

use    utilities_mod, only : timestamp, 		&
                             register_module, 		&
                             open_file, 		&
                             close_file, 		&
                             initialize_utilities, 	&
                             open_file, 		&
                             close_file, 		&
                             find_namelist_in_file,  	&
                             check_namelist_read,    	&
                             error_handler, 		&
                             E_ERR,			& 
                             E_WARN,			& 
                             E_MSG, 			&
                             E_DBG

use obs_sequence_mod, only : obs_sequence_type, 	&
                             interactive_obs, 		&
                             write_obs_seq, 		&
                             interactive_obs_sequence,  &
                             static_init_obs_sequence,  &
                             init_obs_sequence,         &
                             init_obs,                  &
                             set_obs_values,            &
                             set_obs_def,               &
                             set_qc,                    &
                             set_qc_meta_data,          &
                             set_copy_meta_data,        &
                             insert_obs_in_seq,         &
                             obs_type
                    
use obs_def_mod, only      : set_obs_def_kind,          &
                             set_obs_def_location,      &
                             set_obs_def_time,          &
                             set_obs_def_key,           &
                             set_obs_def_error_variance,&
                             obs_def_type,              &
                             init_obs_def,              &
                             get_obs_kind

use obs_def_mopitt_mod, only :  set_obs_def_mopitt_co

use  assim_model_mod, only : static_init_assim_model

use location_mod, only  : location_type, 		&
                          set_location

use time_manager_mod, only : set_date, 			&
                             set_calendar_type, 	&
                             time_type, 		&
                             get_time

use obs_kind_mod, only  : KIND_CO, 		&
                          MOPITT_CO_RETRIEVAL, 		&
                          get_kind_from_menu

use random_seq_mod, only : random_seq_type, 		&
                           init_random_seq, 		&
                           random_uniform

use sort_mod, only       : index_sort


implicit none

! version controlled file description for error handling, do not edit                          
character(len=128), parameter :: &
   source   = "$URL: http://subversion.ucar.edu/DAReS/DART/trunk/obs_sequence/create_obs_sequence.f90 $", &
   revision = "$Revision: 2713 $", &
   revdate  = "$Date: 2007-03-25 22:09:04 -0600 (Sun, 25 Mar 2007) $"


! add variables AFA
type(obs_sequence_type) :: seq
type(obs_type)          :: obs
type(obs_type)          :: obs_old
type(obs_def_type)      :: obs_def
type(location_type)     :: obs_location
type(time_type)         :: obs_time
integer                 :: obs_kind
integer                 :: obs_key

character*4             :: chr_year
character*2             :: chr_month, chr_day,chr_hour
character*129           :: filen, filedir
integer,parameter       :: fileid=88
integer                 :: calendar_type, year, month, day, hour, day1,month1,year1
integer                 :: seconds, days
integer                 :: ios, i, k1, k2 , icopy ! kmr, kmc
!real                   :: pi=3.1415926535898

real                    :: bin_beg, bin_end
integer                 :: days_in_month(12) =(/ &
                            31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31  /)
!real                    :: period_1, period_2
!integer                 :: period

!============================================================
!mopitt variables
!============================================================

integer, parameter      :: mop_dim=10
integer, parameter      :: nlev_cam=10

integer         :: k,kk
real	        :: nlev, nlevels
real            :: sec
real            :: lon
real            :: lat
real            :: psurf
real            :: mopittlev(mop_dim)
real            :: xcomp(mop_dim)
real            :: xcomperr(mop_dim)
real            :: xapr(mop_dim)
real            :: avgker(mop_dim,mop_dim)
real            :: which_row(mop_dim)
real            :: err
real            :: nprs(mop_dim) =(/ &
                                1000.,900.,800.,700.,600.,500.,400.,300.,200.,100. /)


!============================================================
!obs sequence extra variables
!============================================================
integer,parameter   :: max_num_obs=1000000
integer,parameter   :: num_copies=1
integer,parameter   :: num_qc=1
character*129   :: copy_meta_data
character*129   :: qc_meta_data='BASED ON MOPITT QUALITY STATEMENT'
character*129   :: file_name='mopitt_obs_seq'
character*129   :: filename

!============================================================
!dummy variables
!============================================================
real*8          :: longitude
real*8          :: latitude
real*8          :: level
integer         :: which_vert
integer         :: hour1
integer         :: minute
integer         :: second
integer         :: qc_count
real*8, dimension(num_qc)       :: co_qc
real*8, dimension(nlev_cam)     :: co_avgker
real*8, dimension(num_copies)   :: co_vmr
real*8                          :: co_error
real*8                          :: co_prior
real*8                          :: co_psurf

integer,parameter	:: nlon_qc=144
integer,parameter	:: nlat_qc=96
integer,parameter	:: nqc_obs=40

real*8 :: dlon_qc=2.50
real*8 :: dlat_qc=1.9149

integer :: index_qc, xg_count(nlon_qc,nlat_qc), xg(nlon_qc,nlat_qc,500)
integer :: qc_mopitt(1000000), qc_thinning(1000000)
integer :: index_20(1000), index , j,ik, ikk
integer :: lon_qc, lat_qc, io, iunit

integer :: mlev

integer :: line_count

type (random_seq_type) :: inc_ran_seq
real*8                 :: unif(1000)

namelist /create_mopitt_obs_nml/filedir,filename,year,month,day,hour,bin_beg, bin_end

call find_namelist_in_file("input.nml", "create_mopitt_obs_nml", iunit)
read(iunit, nml = create_mopitt_obs_nml, iostat = io)
call check_namelist_read(iunit, io, "create_mopitt_obs_nml")

! Record the namelist values used for the run ...
call error_handler(E_MSG,'init_create_mopitt_obs','create_mopitt_obs_nml values are',' ',' ',' ')
write(     *     , nml=create_mopitt_obs_nml)

! Record the current time, date, etc. to the logfile
call initialize_utilities('create_obs_sequence')
call register_module(source,revision,revdate)


! Initialize the assim_model module, need this to get model
! state meta data for locations of identity observations
!call static_init_assim_model()

! Initialize the obs_sequence module
call static_init_obs_sequence()

! Initialize an obs_sequence structure
call init_obs_sequence(seq, num_copies, num_qc, max_num_obs)

! Initialize the obs variable
call init_obs(obs, num_copies, num_qc)

do icopy =1, num_copies
   if (icopy == 1) then
       copy_meta_data='MOPITT CO observation'
   else
       copy_meta_data='Truth'
   endif
   call set_copy_meta_data(seq, icopy, copy_meta_data)
enddo

call set_qc_meta_data(seq, 1, qc_meta_data)

qc_mopitt(:)=100
qc_thinning(:)=100


!-------------------------------------------------------
! Read MOPITT obs
!-------------------------------------------------------

! Set dates and initialize qc_count
  calendar_type=3                          !Gregorian
  call set_calendar_type(calendar_type)
  qc_count=0

! Perhaps make this a time loop for later runs
  write(chr_year,'(i4.4)') year
  write(chr_month,'(i2.2)') month
  write(chr_day,'(i2.2)') day
  write(chr_hour,'(i2.2)') hour

  if ( mod(year,4) == 0 ) then
       days_in_month(2) = days_in_month(2) + 1
  endif
  if ( mod(year,100) == 0 ) then
       days_in_month(2) = days_in_month(2) - 1
  endif
  if ( mod(year,400) == 0 ) then
       days_in_month(2) = days_in_month(2) + 1
  endif



! Open MOPITT binary file
  filen=chr_year//chr_month//chr_day//chr_hour//'.dat'
  write(6,*)'opening ',TRIM(filedir)//TRIM(filen)

! Read MOPITT file 1
  index_qc=0
  line_count = 0
  open(fileid,file=TRIM(filedir)//TRIM(filen),                     &
       form='formatted', status='old',  &
       iostat=ios)

! Error Check
  if (ios /=0) then
      write(6,*) 'no mopitt file for the day ', day
      go to 999
  endif

! Read MOPITT
  read(fileid,*,iostat=ios) nlev, sec, nlevels, mopittlev, lat, lon 
  line_count = line_count+1

! Error Check
  if (ios /=0) then
      write(6,*) 'no data on file ', TRIM(filen)
      go to 999
  endif

!-------------------------------------------------------
! MAIN LOOP FOR MOPITT OBS
!-------------------------------------------------------
  do while(ios == 0)

       ! Read MOPITT variables
       do ikk =1,int(nlev)
       read(fileid,*) which_row(ikk) 
       read(fileid,*) xcomp(int(which_row(ikk)))
       read(fileid,*) xcomperr(int(which_row(ikk))) 
       read(fileid,*) xapr(int(which_row(ikk))) 
       read(fileid,*) avgker(int(which_row(ikk)),1:int(nlevels)) 
       line_count = line_count+5
       enddo
       
       index_qc = index_qc + 1
       qc_mopitt(index_qc)=0

       !-------------------------------------------------------
       ! Bin to nlat_qcxnlon_qc
       !-------------------------------------------------------

       ! find lon_qc, lat_qc
       lon_qc=nint((lon+180)/dlon_qc) + 1
       lat_qc=nint((lat+90)/dlat_qc) + 1
       if (lat>89.5) then
           lat_qc=nlat_qc
       elseif (lat<-89.5) then
           lat_qc=1
       endif

       !print *, 'lon lat ',lon_qc, lat_qc
       xg_count(lon_qc,lat_qc)=xg_count(lon_qc,lat_qc)+1
       xg(lon_qc,lat_qc,xg_count(lon_qc,lat_qc))=index_qc

       !read next data point
       read(fileid,*,iostat=ios) nlev, sec, nlevels, mopittlev, lat, lon 
       line_count = line_count+1
       !print *, nlev, sec, nlevels, mopittlev, lat, lon
       !if (sec < 0.0) then 
       !    print *, line_count, nlev, sec 
       !    stop
       !endif
       !stop
  enddo !ios

9999   continue
close(fileid)

! Now do the thinning
  call init_random_seq(inc_ran_seq)
  do i=1,nlon_qc
     do j=1,nlat_qc
        if (xg_count(i,j)>nqc_obs) then

            ! draw nqc_obs
              do ik=1,xg_count(i,j)
                  unif(ik)=random_uniform(inc_ran_seq)
              enddo

              call index_sort(unif,index_20,xg_count(i,j))

              do ik=1,nqc_obs
                    index=xg(i,j,index_20(ik))
                    qc_thinning(index)=0
              enddo

        else
              do k=1,xg_count(i,j)
                   index=xg(i,j,k)
                   qc_thinning(index)=0
              enddo

        endif !xg_count
     enddo !j
  enddo !i

!===================================================================================

! Read MOPITT file AGAIN

  index_qc=0

! NOTE NOTE NOTE Check if it should be BIG_ENDIAN
  open(fileid,file=TRIM(filedir)//TRIM(filen),                     &
       form='formatted', status='old',   &
       iostat=ios)

! Error Check
  if (ios /=0) then
      write(6,*) 'no mopitt file for the day ', day
      go to 999
  endif

! Read MOPITT
  read(fileid,*,iostat=ios) nlev, sec, nlevels, mopittlev, lat, lon 

! Error Check
  if (ios /=0) then
      write(6,*) 'no data on file ', TRIM(filen)
      go to 999
  endif

!-------------------------------------------------------
! MAIN LOOP FOR MOPITT OBS
!-------------------------------------------------------
  do while(ios == 0)

     ! Read MOPITT variables
       do ikk = 1, int(nlev)
       read(fileid, *) which_row(ikk)
       read(fileid, *) xcomp(int(which_row(ikk)))
       read(fileid, *) xcomperr(int(which_row(ikk)))
       read(fileid, *) xapr(int(which_row(ikk)))
       read(fileid,*) avgker(int(which_row(ikk)),1:int(nlevels))
       enddo

       index_qc=index_qc+1
       if ( (qc_mopitt(index_qc)==0).and.(qc_thinning(index_qc)==0) ) then
             co_qc(1)=0
       else
             co_qc(1)=100
       endif
       !print *, qc_mopitt(index_qc),qc_thinning(index_qc)

       if ( co_qc(1) == 0 )  then

       !--------------------------------------------------------
       ! assign obs variables for obs_sequence
       !--------------------------------------------------------

       ! location
       latitude=lat 
       if (lon<0) then
         longitude=lon+360
       else
         longitude=lon
       endif

        ! time (get time from sec MOPITT variable)
        hour1 = int(sec/3600d0)
        minute = int( (sec-hour1*3600d0)/60d0)
        second = int(sec - hour1*3600d0 - minute*60d0)
        if ( hour == 24 ) then
            if (sec <= 21.01*3600d0) then
                day1 = day+1
                
                if (day1 > days_in_month(month)) then
                   day1 = 1
                   if (month < 12) then
                       month1 = month + 1
                       year1 = year
                   else
                       month1 = 1
                       year1  = year+1
                   endif
                else
                   month1 = month
                   year1 = year
                endif
            else
                day1 = day
                month1 = month
                year1 = year
            endif
        else
           day1 = day
           month1 = month
           year1 = year
        endif

        obs_time=set_date(year1,month1,day1,hour1,minute,second)

        call get_time(obs_time, seconds, days)

        !--------------------------------------------------------
        ! Loop through the mop_dim levels for now
        ! Use each mixing ratio as a separate obs
        !--------------------------------------------------------
        
        do kk = 1, int(nlev)
 
           qc_count=qc_count+1
           level = mopittlev(int(which_row(kk)))*100

           ! since this is already in spectral space, there is no vertical location
           ! set which_vert to VERTISUNDEF=-2
           ! level doesnt have value here, replace level passed to set_location to kk
! APM: ++++
!
! APM: DART VERTIS settings
!           VERTISUNDEF       = -2 ! has no vertical location (undefined)
!           VERTISSURFACE     = -1 ! surface value
!           VERTISLEVEL       =  1 ! by level
!           VERTISPRESSURE    =  2 ! by pressure
!           VERTISHEIGHT      =  3 ! by height
!           VERTISSCALEHEIGHT =  4 ! by scale height
!
! APM: For the SVD_Inv code use the following
           which_vert=2
           if (kk.eq.1) which_vert=-1
! APM: ++++
!
           obs_location=set_location(longitude, latitude, level, which_vert)
           co_psurf=mopittlev(1)*100               !hPa to Pa
           co_avgker(1:int(nlevels))=avgker(int(which_row(kk)),1:int(nlevels))               !unitless
           co_prior=xapr(int(which_row(kk)))  
           co_vmr(1)=xcomp(int(which_row(kk)))
           err = xcomperr(int(which_row(kk)))
           co_error=err*err

           obs_kind             = MOPITT_CO_RETRIEVAL

           call set_obs_def_kind(obs_def, obs_kind)
           call set_obs_def_location(obs_def, obs_location)
           call set_obs_def_time(obs_def, obs_time)
           call set_obs_def_error_variance(obs_def, co_error)
           call set_obs_def_mopitt_co(qc_count, co_avgker, co_prior, co_psurf, &
                                      int(nlevels))
           call set_obs_def_key(obs_def, qc_count)

           call set_obs_values(obs, co_vmr, 1)
           call set_qc(obs, co_qc, num_qc)
           call set_obs_def(obs, obs_def)

           if ( qc_count == 1 ) then
              call insert_obs_in_seq(seq, obs)
           else
              call insert_obs_in_seq(seq, obs, obs_old )
           endif
           obs_old=obs

       enddo    !k loop

       !endif    !bin

       endif    !co_qc(1)


    ! read next data point
     read(fileid,*,iostat=ios) nlev, sec, nlevels, mopittlev, lat, lon 

  enddo    !ios

  !----------------------------------------------------------------------
  ! Write the sequence to a file
  !----------------------------------------------------------------------
    if  (bin_beg == 3.01) then
         file_name=trim(file_name)//chr_year//chr_month//chr_day//'06'
    elseif (bin_beg == 9.01) then
         file_name=trim(file_name)//chr_year//chr_month//chr_day//'12'
    elseif (bin_beg == 15.01) then
         file_name=trim(file_name)//chr_year//chr_month//chr_day//'18'
    elseif (bin_beg == 21.01) then
         file_name=trim(file_name)//chr_year//chr_month//chr_day//'24'
    endif !bin

    call write_obs_seq(seq, file_name)

999 continue
    close(fileid)


!-----------------------------------------------------------------------------
! Clean up
!-----------------------------------------------------------------------------
call timestamp(string1=source,string2=revision,string3=revdate,pos='end')


end program create_mopitt_obs_sequence

