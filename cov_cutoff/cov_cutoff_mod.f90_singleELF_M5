! DART software - Copyright 2004 - 2011 UCAR. This open source software is
! provided by UCAR, "as is", without charge, subject to all terms of use at
! http://www.image.ucar.edu/DAReS/DART/DART_download

module cov_cutoff_mod

! <next few lines under version control, do not edit>
! $URL: https://subversion.ucar.edu/DAReS/DART/branches/development/cov_cutoff/cov_cutoff_mod.f90 $
! $Id: cov_cutoff_mod.f90 5074 2011-07-15 17:06:58Z thoar $
! $Revision: 5074 $
! $Date: 2011-07-15 11:06:58 -0600 (Fri, 15 Jul 2011) $

use     types_mod, only : r8
use utilities_mod, only : register_module, error_handler, E_ERR, E_MSG, &
                          do_output, do_nml_file, do_nml_term, nmlfileunit, &
                          find_namelist_in_file, check_namelist_read, &
                          file_exist, get_unit
use location_mod,  only : location_type

implicit none
private

public :: comp_cov_factor

! version controlled file description for error handling, do not edit
character(len=128), parameter :: &
   source   = "$URL: https://subversion.ucar.edu/DAReS/DART/branches/development/cov_cutoff/cov_cutoff_mod.f90 $", &
   revision = "$Revision: 5074 $", &
   revdate  = "$Date: 2011-07-15 11:06:58 -0600 (Fri, 15 Jul 2011) $"


!============================================================================

!---- namelist with default values
logical :: namelist_initialized = .false.

integer :: select_localization = 1
! Value 1 selects default Gaspari-Cohn cutoff
! Value 2 selects boxcar
! Value 3 selects ramped boxcar

namelist / cov_cutoff_nml / select_localization

! Lili (2013-04-18)
logical :: first_get_elf_horizontal = .true.
logical :: first_get_elf_vertical   = .true.
character(len = 129) :: elf_file_horizontal_name = "elf_horizontal.in"
character(len = 129) :: elf_file_vertical_name   = "elf_vertical.in"
character(len = 129) :: errstring
real(r8), allocatable   :: elf_horizontal(:,:)
real(r8), allocatable   :: elf_vertical(:,:)

!============================================================================

contains

!======================================================================



function comp_cov_factor(z_in, c, obs_loc, obs_kind, target_loc, target_kind, &
   localization_override)
!----------------------------------------------------------------------
! function comp_cov_factor(z_in, c)
!
! Computes a covariance cutoff function from Gaspari and Cohn
! QJRMS, 125, 723-757.  (their eqn. 4.10)
!
! z_in is the distance while c is the cutoff distance. 
! For distances greater than 2c, the cov_factor returned goes to 0.

! Other ramping shapes are also available and can be selected by a namelist
! parameter. At present, these include a boxcar with the given halfwidth
! and a ramp in which the weight is set at 1.0 up to the half-width 
! distance and then decreases linearly to 0 at twice the half-width 
! distance.

! Additional information is passed in about the location and kind of the
! observation and the location and kind of the variable being targeted for
! increments. These can be used for more refined algorithms that want to 
! make the cutoff a function of these additional arguments. 

implicit none

real(r8),                      intent(in) :: z_in, c
type(location_type), optional, intent(in) :: obs_loc, target_loc
integer,             optional, intent(in) :: obs_kind, target_kind
integer,             optional, intent(in) :: localization_override
real(r8)                                  :: comp_cov_factor

real(r8) :: z, r
integer  :: iunit, io
integer  :: localization_type

real(r8) :: k1, k2, k3, k4, k5
real(r8) :: b1, b2, b3, b4, b5

!--------------------------------------------------------
! Initialize namelist if not already done
if(.not. namelist_initialized) then

   call register_module(source, revision, revdate)

   namelist_initialized = .true.

   ! Read the namelist entry
   call find_namelist_in_file("input.nml", "cov_cutoff_nml", iunit)
   read(iunit, nml = cov_cutoff_nml, iostat = io)
   call check_namelist_read(iunit, io, "cov_cutoff_nml")

   if (do_nml_file()) write(nmlfileunit,nml=cov_cutoff_nml)
   if (do_nml_term()) write(     *     ,nml=cov_cutoff_nml)


   if (do_output()) then
      select case (select_localization)
         case (1)
            call error_handler(E_MSG,'comp_cov_factor:', &
               'Standard Gaspari Cohn localization selected')
         case (2)
            call error_handler(E_MSG,'comp_cov_factor:', &
               'Boxcar localization selected')
         case (3)
            call error_handler(E_MSG,'comp_cov_factor:', &
               'Ramped localization selected')
         case default
            call error_handler(E_ERR,'comp_cov_factor', &
               'Illegal value of "select_localization" in cov_cutoff_mod namelist', &
                source, revision, revdate )
      end select
   endif

endif
!---------------------------------------------------------

if(present(localization_override)) then
   localization_type = localization_override
else
   localization_type = select_localization
endif

z = abs(z_in)

!----------------------------------------------------------

if(localization_type == 1) then ! Standard Gaspari Cohn localization

   if( z >= c*2.0_r8 ) then

      comp_cov_factor = 0.0_r8

   else if( z <= c ) then
      r = z / c
      comp_cov_factor = &
           ( ( ( -0.25_r8*r +0.5_r8 )*r +0.625_r8 )*r -5.0_r8/3.0_r8 )*r**2 + 1.0_r8
!!$           r**5 * (-0.25_r8 ) + &
!!$           r**4 / 2.0_r8 +              &
!!$           r**3 * 5.0_r8/8.0_r8 -       &
!!$           r**2 * 5.0_r8/3.0_r8 + 1.0_r8
   else

      r = z / c
      comp_cov_factor = &
           ( ( ( ( r/12.0_r8 -0.5_r8 )*r +0.625_r8 )*r +5.0_r8/3.0_r8 )*r -5.0_r8 )*r &
!!$           r**5 / 12.0_r8  -  &
!!$           r**4 / 2.0_r8   +  &
!!$           r**3 * 5.0_r8 / 8.0_r8 + &
!!$           r**2 * 5.0_r8 / 3.0_r8 - 5.0_r8*r &
           + 4.0_r8 - 2.0_r8 / (3.0_r8 * r) 
   endif

else if(localization_type == 2) then ! BOXCAR localization

   if(z < 2.0_r8 * c) then
      comp_cov_factor = 1.0_r8
   else
      comp_cov_factor = 0.0_r8
   endif

else if(localization_type == 3) then ! Ramped localization

   if(z >= 2.0_r8 * c) then
      comp_cov_factor = 0.0_r8
   else if(z >= c .and. z < 2.0_r8 * c) then
      comp_cov_factor = (2.0_r8 * c - z) / c
   else
      comp_cov_factor = 1.0_r8
   endif

else if(localization_type == 4) then ! horizontal cubic spline fitted function

    ! f(z)=beta1*(knots1-z)^3+beta2*(knots2-z)^3+beta3*(knots3-z)^3... for each
    ! term, z <= knots
    if ( first_get_elf_horizontal ) then
       if ( file_exist(elf_file_horizontal_name) ) then
          write(errstring,*) 'ELF file of cubicsplinefit exist ', trim(elf_file_horizontal_name)
          call error_handler(E_MSG,'comp_cov_factor:', errstring,source,revision,revdate)
 
          allocate(elf_horizontal(2,5))
          iunit = get_unit()
          open(unit = iunit, file = elf_file_horizontal_name)
          ! first row: beta 
          read(iunit, *) elf_horizontal(1,1:5)
          ! second row: knots 
          read(iunit, *) elf_horizontal(2,1:5)
print *, elf_horizontal(1,1:5)
print *, elf_horizontal(2,1:5)
          close(iunit)
       else
          write(errstring,*) 'CANNOT find ELF file of cubicsplinefit ', trim(elf_file_horizontal_name)
          call error_handler(E_ERR,'comp_cov_factor:',errstring,source,revision,revdate)
       endif
       first_get_elf_horizontal = .false.
    endif
    b1 = elf_horizontal(1,1)
    b2 = elf_horizontal(1,2)
    b3 = elf_horizontal(1,3)
    b4 = elf_horizontal(1,4)
    b5 = elf_horizontal(1,5)
    k1 = elf_horizontal(2,1)
    k2 = elf_horizontal(2,2)
    k3 = elf_horizontal(2,3)
    k4 = elf_horizontal(2,4)
    k5 = elf_horizontal(2,5)

    if ( z <= k1 ) then
       comp_cov_factor = b1*(k1-z)**3 + b2*(k2-z)**3 + b3*(k3-z)**3 + b4*(k4-z)**3 + b5*(k5-z)**3
    else if ( z > k1 .and. z <= k2 ) then
       comp_cov_factor = b2*(k2-z)**3 + b3*(k3-z)**3 + b4*(k4-z)**3 + b5*(k5-z)**3
    else if ( z > k2 .and. z <= k3 ) then
       comp_cov_factor = b3*(k3-z)**3 + b4*(k4-z)**3 + b5*(k5-z)**3
    else if ( z > k3 .and. z <= k4 ) then
       comp_cov_factor = b4*(k4-z)**3 + b5*(k5-z)**3
    else if ( z > k4 .and. z <= k5 ) then
       comp_cov_factor = b5*(k5-z)**3
    else
       comp_cov_factor = 0.0_r8
    endif


else if(localization_type == 5) then ! vertical cubic spline fitted function

    ! f(z)=beta1*(knots1-z)^3+beta2*(knots2-z)^3+beta3*(knots3-z)^3... for each
    ! term, z <= knots
    if ( first_get_elf_vertical ) then
       if ( file_exist(elf_file_vertical_name) ) then
          write(errstring,*) 'ELF file of cubicsplinefit exist ', trim(elf_file_vertical_name)
          call error_handler(E_MSG,'comp_cov_factor:', errstring,source,revision,revdate)

          allocate(elf_vertical(2,5))
          iunit = get_unit()
          open(unit = iunit, file = elf_file_vertical_name)
          ! first row: beta 
          read(iunit, *) elf_vertical(1,1:5)
          ! second row: knots 
          read(iunit, *) elf_vertical(2,1:5)
print *, elf_vertical(1,1:5)
print *, elf_vertical(2,1:5)
          close(iunit)
       else
          write(errstring,*) 'CANNOT find ELF file of cubicsplinefit ', trim(elf_file_vertical_name)
          call error_handler(E_ERR,'comp_cov_factor:',errstring,source,revision,revdate)
       endif
       first_get_elf_vertical = .false.
    endif
    b1 = elf_vertical(1,1)
    b2 = elf_vertical(1,2)
    b3 = elf_vertical(1,3)
    b4 = elf_vertical(1,4)
    b5 = elf_vertical(1,5)
    k1 = elf_vertical(2,1)
    k2 = elf_vertical(2,2)
    k3 = elf_vertical(2,3)
    k4 = elf_vertical(2,4)
    k5 = elf_vertical(2,5)

    if ( z <= k1 ) then
       comp_cov_factor = b1*(k1-z)**3 + b2*(k2-z)**3 + b3*(k3-z)**3 + b4*(k4-z)**3 + b5*(k5-z)**3
    else if ( z > k1 .and. z <= k2 ) then
       comp_cov_factor = b2*(k2-z)**3 + b3*(k3-z)**3 + b4*(k4-z)**3 + b5*(k5-z)**3
    else if ( z > k2 .and. z <= k3 ) then
       comp_cov_factor = b3*(k3-z)**3 + b4*(k4-z)**3 + b5*(k5-z)**3
    else if ( z > k3 .and. z <= k4 ) then
       comp_cov_factor = b4*(k4-z)**3 + b5*(k5-z)**3
    else if ( z > k4 .and. z <= k5 ) then
       comp_cov_factor = b5*(k5-z)**3
    else
       comp_cov_factor = 0.0_r8
    endif

else ! Otherwise namelist parameter is illegal; this is an error

     call error_handler(E_ERR,'comp_cov_factor', &
              'Illegal value of "localization" in cov_cutoff_mod namelist', &
               source, revision, revdate )

endif

end function comp_cov_factor

end module cov_cutoff_mod
