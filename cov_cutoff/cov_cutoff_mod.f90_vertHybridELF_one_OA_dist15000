! DART software - Copyright 2004 - 2011 UCAR. This open source software is
! provided by UCAR, "as is", without charge, subject to all terms of use at
! http://www.image.ucar.edu/DAReS/DART/DART_download

module cov_cutoff_mod

! <next few lines under version control, do not edit>
! $URL: https://subversion.ucar.edu/DAReS/DART/branches/development/cov_cutoff/cov_cutoff_mod.f90 $
! $Id: cov_cutoff_mod.f90 5074 2011-07-15 17:06:58Z thoar $
! $Revision: 5074 $
! $Date: 2011-07-15 11:06:58 -0600 (Fri, 15 Jul 2011) $

use     types_mod, only : r8
use utilities_mod, only : register_module, error_handler, E_ERR, E_MSG, &
                          do_output, do_nml_file, do_nml_term, nmlfileunit, &
                          find_namelist_in_file, check_namelist_read, &
                          file_exist, get_unit
use location_mod,  only : location_type, get_location

implicit none
private

public :: comp_cov_factor

! version controlled file description for error handling, do not edit
character(len=128), parameter :: &
   source   = "$URL: https://subversion.ucar.edu/DAReS/DART/branches/development/cov_cutoff/cov_cutoff_mod.f90 $", &
   revision = "$Revision: 5074 $", &
   revdate  = "$Date: 2011-07-15 11:06:58 -0600 (Fri, 15 Jul 2011) $"


!============================================================================

!---- namelist with default values
logical :: namelist_initialized = .false.

integer :: select_localization = 1
! Value 1 selects default Gaspari-Cohn cutoff
! Value 2 selects boxcar
! Value 3 selects ramped boxcar

namelist / cov_cutoff_nml / select_localization

! Lili (2013-04-18)
logical :: first_get_ELF_horizontal = .true.
logical :: first_get_ELF_vertical   = .true.
logical :: first_get_precip_loc     = .true.
character(len = 129) :: elf_file_horizontal_name = "elf_horizontal.in"
character(len = 129) :: elf_file_vertical_name   = "elf_vertical.in"
character(len = 129) :: precip_loc_name = 'precip_loc.dat'
character(len = 129) :: errstring
real(r8), allocatable   :: elf_horizontal(:,:)
real(r8), allocatable   :: elf_vertical(:,:)
real(r8), allocatable   :: precip_loc(:,:)
integer   :: num_precip_loc

!============================================================================

contains

!======================================================================



function comp_cov_factor(z_in, c_in, obs_loc, obs_kind, target_loc, target_kind, &
   localization_override)
!----------------------------------------------------------------------
! function comp_cov_factor(z_in, c)
!
! Computes a covariance cutoff function from Gaspari and Cohn
! QJRMS, 125, 723-757.  (their eqn. 4.10)
!
! z_in is the distance while c is the cutoff distance. 
! For distances greater than 2c, the cov_factor returned goes to 0.

! Other ramping shapes are also available and can be selected by a namelist
! parameter. At present, these include a boxcar with the given halfwidth
! and a ramp in which the weight is set at 1.0 up to the half-width 
! distance and then decreases linearly to 0 at twice the half-width 
! distance.

! Additional information is passed in about the location and kind of the
! observation and the location and kind of the variable being targeted for
! increments. These can be used for more refined algorithms that want to 
! make the cutoff a function of these additional arguments. 

implicit none

real(r8),                      intent(in) :: z_in, c_in
type(location_type), optional, intent(in) :: obs_loc, target_loc
integer,             optional, intent(in) :: obs_kind, target_kind
integer,             optional, intent(in) :: localization_override
!integer,             optional, intent(in) :: ilatindex
real(r8)                                  :: comp_cov_factor

real(r8) :: z, r
integer  :: iunit, io
integer  :: localization_type

integer  :: i, j, k, pindex
real(r8) :: k1, k2, k3, k4, k5
real(r8) :: b1, b2, b3, b4, b5
real(r8) :: c_vert, z_joint, z_adjust, height_norm
real(r8) :: c
real(r8), dimension(3) :: obs_array, var_array

logical  :: obs_with_precip

!--------------------------------------------------------
! Initialize namelist if not already done
if(.not. namelist_initialized) then

   call register_module(source, revision, revdate)

   namelist_initialized = .true.

   ! Read the namelist entry
   call find_namelist_in_file("input.nml", "cov_cutoff_nml", iunit)
   read(iunit, nml = cov_cutoff_nml, iostat = io)
   call check_namelist_read(iunit, io, "cov_cutoff_nml")

   if (do_nml_file()) write(nmlfileunit,nml=cov_cutoff_nml)
   if (do_nml_term()) write(     *     ,nml=cov_cutoff_nml)


   if (do_output()) then
      select case (select_localization)
         case (1)
            call error_handler(E_MSG,'comp_cov_factor:', &
               'Standard Gaspari Cohn localization selected')
         case (2)
            call error_handler(E_MSG,'comp_cov_factor:', &
               'Boxcar localization selected')
         case (3)
            call error_handler(E_MSG,'comp_cov_factor:', &
               'Ramped localization selected')
         case default
            call error_handler(E_ERR,'comp_cov_factor', &
               'Illegal value of "select_localization" in cov_cutoff_mod namelist', &
                source, revision, revdate )
      end select
   endif

endif
!---------------------------------------------------------

if(present(localization_override)) then
   localization_type = localization_override
else
   localization_type = select_localization
endif

z = abs(z_in)

c = c_in

!----------------------------------------------------------

if(localization_type == 1) then ! Standard Gaspari Cohn localization

   if( z >= c*2.0_r8 ) then

      comp_cov_factor = 0.0_r8

   else if( z <= c ) then
      r = z / c
      comp_cov_factor = &
           ( ( ( -0.25_r8*r +0.5_r8 )*r +0.625_r8 )*r -5.0_r8/3.0_r8 )*r**2 + 1.0_r8
!!$           r**5 * (-0.25_r8 ) + &
!!$           r**4 / 2.0_r8 +              &
!!$           r**3 * 5.0_r8/8.0_r8 -       &
!!$           r**2 * 5.0_r8/3.0_r8 + 1.0_r8
   else

      r = z / c
      comp_cov_factor = &
           ( ( ( ( r/12.0_r8 -0.5_r8 )*r +0.625_r8 )*r +5.0_r8/3.0_r8 )*r -5.0_r8 )*r &
!!$           r**5 / 12.0_r8  -  &
!!$           r**4 / 2.0_r8   +  &
!!$           r**3 * 5.0_r8 / 8.0_r8 + &
!!$           r**2 * 5.0_r8 / 3.0_r8 - 5.0_r8*r &
           + 4.0_r8 - 2.0_r8 / (3.0_r8 * r) 
   endif

else if(localization_type == 2) then ! BOXCAR localization

   if(z < 2.0_r8 * c) then
      comp_cov_factor = 1.0_r8
   else
      comp_cov_factor = 0.0_r8
   endif

else if(localization_type == 3) then ! Ramped localization

   if(z >= 2.0_r8 * c) then
      comp_cov_factor = 0.0_r8
   else if(z >= c .and. z < 2.0_r8 * c) then
      comp_cov_factor = (2.0_r8 * c - z) / c
   else
      comp_cov_factor = 1.0_r8
   endif

else if(localization_type == 4) then ! horizontal cubic spline fitted function

!    ! f(z)=beta1*(knots1-z)^3+beta2*(knots2-z)^3+beta3*(knots3-z)^3... for each
!    ! term, z <= knots
!    if ( first_get_elf_horizontal ) then
!       if ( file_exist(elf_file_horizontal_name) ) then
!          write(errstring,*) 'ELF file of cubicsplinefit exist ', trim(elf_file_horizontal_name)
!          call error_handler(E_MSG,'comp_cov_factor:', errstring,source,revision,revdate)
! 
!          allocate(elf_horizontal(6,3))
!          iunit = get_unit()
!          open(unit = iunit, file = elf_file_horizontal_name)
!          ! first row: beta, SH
!          read(iunit, *) elf_horizontal(1,1:3)
!          ! second row: knots, SH
!          read(iunit, *) elf_horizontal(2,1:3)
!          read(iunit, *) elf_horizontal(3,1:3)  ! beta, TP
!          read(iunit, *) elf_horizontal(4,1:3)  ! knot, TP
!          read(iunit, *) elf_horizontal(5,1:3)  ! beta, NH
!          read(iunit, *) elf_horizontal(6,1:3)  ! knot, NH
!do i = 1, 6
!   print *, elf_horizontal(i,1:3)
!enddo
!          close(iunit)
!       else
!          write(errstring,*) 'CANNOT find ELF file of cubicsplinefit ', trim(elf_file_horizontal_name)
!          call error_handler(E_ERR,'comp_cov_factor:',errstring,source,revision,revdate)
!       endif
!       first_get_elf_horizontal = .false.
!    endif
!    b1 = elf_horizontal((ilatindex-1)*2+1,1)
!    b2 = elf_horizontal((ilatindex-1)*2+1,2)
!    b3 = elf_horizontal((ilatindex-1)*2+1,3)
!    k1 = elf_horizontal((ilatindex-1)*2+2,1)
!    k2 = elf_horizontal((ilatindex-1)*2+2,2)
!    k3 = elf_horizontal((ilatindex-1)*2+2,3)
!
!    if ( z <= k1 ) then
!       comp_cov_factor = b1*(k1-z)**3 + b2*(k2-z)**3 + b3*(k3-z)**3
!    else if ( z > k1 .and. z <= k2 ) then
!       comp_cov_factor = b2*(k2-z)**3 + b3*(k3-z)**3
!    else if ( z > k2 .and. z <= k3 ) then
!       comp_cov_factor = b3*(k3-z)**3
!    else
!       comp_cov_factor = 0.0_r8
!    endif
!    comp_cov_factor = min(comp_cov_factor,1.0_r8)

else if(localization_type == 5) then ! vertical cubic spline fitted function

! parameters from 2012053000_2012061118
!    c_vert  = 0.08_r8
!    z_joint = 3000.0_r8
!    height_norm = 80000.0_r8
!    k1 = 3750.0
!    k2 = 7500.0
!    k3 = 11250.0
!    k4 = 15000.0
!    b1 = -0.0523e-11
!    b2 = 0.5882e-11
!    b3 = -0.5531e-11
!    b4 = 0.1819e-11
! parameters from 2012052600_2012053018
!    c_vert  = 0.08_r8
!    z_joint = 3000.0_r8
!    height_norm = 80000.0_r8
!    k1 = 3500.0
!    k2 = 7000.0
!    k3 = 10500.0
!    k4 = 14000.0
!    b1 = -0.0700e-10
!    b2 = 0.1038e-10
!    b3 = -0.0845e-10
!    b4 = 0.0264e-10
    c_vert  = 0.08_r8
    z_joint = 3000.0_r8
    height_norm = 80000.0_r8
    k1 = 3750.0
    k2 = 7500.0
    k3 = 11250.0
    k4 = 15000.0
    b1 = -0.3809e-11
    b2 = 0.7223e-11
    b3 = -0.6262e-11
    b4 = 0.2011e-11

    if ( z > z_joint ) then
       z_adjust = z - z_joint
       if ( z_adjust <= k1 ) then
          comp_cov_factor = b1*(k1-z_adjust)**3 + b2*(k2-z_adjust)**3 + b3*(k3-z_adjust)**3 + b4*(k4-z_adjust)**3
       else if ( z_adjust > k1 .and. z_adjust <= k2 ) then
          comp_cov_factor = b2*(k2-z_adjust)**3 + b3*(k3-z_adjust)**3 + b4*(k4-z_adjust)**3
       else if ( z_adjust > k2 .and. z_adjust <= k3 ) then
          comp_cov_factor = b3*(k3-z_adjust)**3 + b4*(k4-z_adjust)**3
       else if ( z_adjust > k3 .and. z_adjust <= k4 ) then
          comp_cov_factor = b4*(k4-z_adjust)**3
       else
          comp_cov_factor = 0.0_r8
       endif
!       comp_cov_factor = min(comp_cov_factor,1.0_r8)
    else
       z_adjust = z/height_norm
       if( z_adjust >= c_vert*2.0_r8 ) then
          comp_cov_factor = 0.0_r8
       else if( z_adjust <= c_vert ) then
          r = z_adjust / c_vert
          comp_cov_factor = &
               ( ( ( -0.25_r8*r +0.5_r8 )*r +0.625_r8 )*r -5.0_r8/3.0_r8 )*r**2 + 1.0_r8
       else
          r = z_adjust / c_vert
          comp_cov_factor = &
               ( ( ( ( r/12.0_r8 -0.5_r8 )*r +0.625_r8 )*r +5.0_r8/3.0_r8 )*r-5.0_r8 )*r &
               + 4.0_r8 - 2.0_r8 / (3.0_r8 * r)
       endif
    endif

else ! Otherwise namelist parameter is illegal; this is an error

     call error_handler(E_ERR,'comp_cov_factor', &
              'Illegal value of "localization" in cov_cutoff_mod namelist', &
               source, revision, revdate )

endif

end function comp_cov_factor

end module cov_cutoff_mod
